{"version":3,"sources":["state/app_state.tsx","Header/Header.tsx","routes.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["AppContext","createContext","title","routes","NavBar","props","id","className","map","route","key","to","path","text","Header","context","React","useContext","uuid","component","a","API","get","response","console","log","App","useEffect","getData","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNAaaA,EAAaC,wBALe,CACvCC,MAAO,qBACPC,OAAQ,K,MCWV,SAASC,EAAOC,GACd,OACE,yBAAKC,GAAG,aAAaC,UAAU,yBAC7B,4BAAKF,EAAMH,OACX,4BACGG,EAAMF,OAAOK,KAAI,SAAAC,GAAK,OACrB,kBAAC,IAAD,CAAMC,IAAKD,EAAMH,GAAIK,GAAIF,EAAMG,MAC5BH,EAAMI,WAQJC,MAxBf,SAAgBT,GACd,IAAIU,EAAUC,IAAMC,WAAWjB,GAC/B,OACE,4BAAQM,GAAG,aAAaC,UAAU,aAChC,kBAACH,EAAD,CAAQF,MAAOa,EAAQb,MAAOC,OAAQE,EAAMF,W,yBCNrCA,EAAkB,CAC7B,CACEG,GAAIY,MACJN,KAAM,aACNC,KAAM,YACNM,UAAW,WACT,OAAO,4CAGX,CACEb,GAAIY,MACJN,KAAM,WACNC,KAAM,UACNM,UAAW,WACT,OAAO,0CAGX,CACEb,GAAIY,MACJN,KAAM,SACNC,KAAM,QACNM,UAAW,WACT,OAAO,wCAGX,CACEb,GAAIY,MACJN,KAAM,cACNC,KAAM,aACNM,UAAW,WACT,OAAO,6CAGX,CACEb,GAAIY,MACJL,KAAM,OACND,KAAM,IACNO,UAAW,WACT,OAAO,wC,4CCvCb,4BAAAC,EAAA,sEACuBC,IAAIC,IAAI,SAAU,UAAW,IADpD,OACMC,EADN,OAEEC,QAAQC,IAAI,WAAYF,GAF1B,4C,sBA8BeG,MAjBf,WAKE,OAJAC,qBAAU,WACRH,QAAQC,IAAIJ,K,mCACZO,KACC,IAED,kBAAC,IAAD,KACE,kBAAC5B,EAAW6B,SAAZ,CAAqBC,MAAO,CAAE5B,MAAO,qBAAsBC,OAAQ,KACjE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAAQJ,OAAQA,IAChB,kBAAC,IAAD,KAjBDA,EAAOK,KAAI,SAAAC,GAAK,OACrB,kBAAC,IAAD,CAAOC,IAAKD,EAAMH,GAAIM,KAAMH,EAAMG,MAC/BH,EAAMU,mBCLOY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.9736dde4.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nimport { Route } from \"../routes\";\r\n\r\nexport interface AppState {\r\n  title: string;\r\n  routes: Route[];\r\n}\r\n\r\nexport const appInitialState: AppState = {\r\n  title: \"Kevin Freistroffer\",\r\n  routes: []\r\n};\r\n\r\nexport const AppContext = createContext<AppState>(appInitialState);\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AppContext } from \"../state/app_state\";\r\nimport \"./header_styles.scss\";\r\nimport { Route } from \"../routes\";\r\n\r\ninterface Props {\r\n  routes: Route[];\r\n}\r\n\r\nfunction Header(props: Props) {\r\n  let context = React.useContext(AppContext);\r\n  return (\r\n    <header id=\"app-header\" className=\"flex row \">\r\n      <NavBar title={context.title} routes={props.routes}></NavBar>\r\n    </header>\r\n  );\r\n}\r\n\r\nfunction NavBar(props: { title: string; routes: Route[] }) {\r\n  return (\r\n    <nav id=\"app-navbar\" className=\"flex row align-center\">\r\n      <h1>{props.title}</h1>\r\n      <ul>\r\n        {props.routes.map(route => (\r\n          <Link key={route.id} to={route.path}>\r\n            {route.text}\r\n          </Link>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component, FunctionComponent } from \"react\";\r\nimport * as uuid from \"uuid\";\r\n\r\nexport interface Route {\r\n  id: string;\r\n  path: string;\r\n  text: string;\r\n  component: FunctionComponent | Component;\r\n}\r\n\r\nexport const routes: Route[] = [\r\n  {\r\n    id: uuid.v4(),\r\n    path: \"/portfolio\",\r\n    text: \"Portfolio\",\r\n    component: function Portfolio() {\r\n      return <div>portfolio</div>;\r\n    }\r\n  },\r\n  {\r\n    id: uuid.v4(),\r\n    path: \"/contact\",\r\n    text: \"Contact\",\r\n    component: function Contact() {\r\n      return <div>contact</div>;\r\n    }\r\n  },\r\n  {\r\n    id: uuid.v4(),\r\n    path: \"/about\",\r\n    text: \"About\",\r\n    component: function About() {\r\n      return <div>about</div>;\r\n    }\r\n  },\r\n  {\r\n    id: uuid.v4(),\r\n    path: \"/travelling\",\r\n    text: \"Travelling\",\r\n    component: function Travelling() {\r\n      return <div>Travelling</div>;\r\n    }\r\n  },\r\n  {\r\n    id: uuid.v4(),\r\n    text: \"Home\",\r\n    path: \"/\",\r\n    component: function Home() {\r\n      return <div>Home</div>;\r\n    }\r\n  }\r\n];\r\n","import React, { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport { API } from \"aws-amplify\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { appInitialState, AppContext } from \"./state/app_state\";\nimport { routes } from \"./routes\";\n\nasync function getData() {\n  let response = await API.get(\"server\", \"/server\", \"\");\n  console.log(\"response\", response);\n}\n\nfunction paintRoutes() {\n  return routes.map(route => (\n    <Route key={route.id} path={route.path}>\n      {route.component}\n    </Route>\n  ));\n}\n\nfunction App() {\n  useEffect(() => {\n    console.log(API);\n    getData();\n  }, []);\n  return (\n    <Router>\n      <AppContext.Provider value={{ title: \"Kevin Freistroffer\", routes: [] }}>\n        <div className=\"App\">\n          <Header routes={routes}></Header>\n          <Switch>{paintRoutes()}</Switch>\n        </div>\n      </AppContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}